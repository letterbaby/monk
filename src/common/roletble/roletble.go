// Code generated by tbltool. DO NOT EDIT.
// source:roletbl.md


package roletbl

import (
	"strconv"

	"github.com/letterbaby/manzo/logger"
	"github.com/letterbaby/manzo/mysql"

	"github.com/golang/protobuf/proto"
)

var (
	cols map[string]*mysql.MyFiled
	
	idlst =[]string{
		"`roleId` INT(10)  DEFAULT 0  COMMENT '用户ID'",
		"`roleName` VARCHAR(64) NOT NULL DEFAULT '' COMMENT '角色名'",
		"`level` INT(10)  DEFAULT 0  COMMENT '等级'",
	}
	
	idxlst =[]string{
		"roleId",
	}	
	
	prmlst=[]string{
	}
)

const (
	tblname = "role"
	idname  = "roleId"
)

type RoleData struct {
	mysql.MyData
}

func Init(tbln string, dbops *mysql.MyOps) {
	if len(tbln) >0 {
		dbops.UseTable(tbln)
	} else {
		dbops.UseTable(tblname)
	}
	//MyISAM,InnoDB
	
	
	dbops.CreateTable("InnoDB", 10000, "角色表", idlst, idxlst, prmlst)
	dbops.AlertField("roleId", "INT(10)  DEFAULT 0 ", "用户ID", int64(0 ), false)
	dbops.AlertField("roleName", "VARCHAR(64) NOT NULL DEFAULT ''", "角色名", "", false)
	dbops.AlertField("level", "INT(10)  DEFAULT 0 ", "等级", int32(0 ), false)
	dbops.AddIndexKey(" ADD INDEX idx_roleId(`roleId`) ")

	cols = dbops.GetCols()
}

func cd(id interface{}, tbln string, dbmgr *mysql.DBMgr)*RoleData {
	if len(cols) == 0 {
		logger.Error("CreateData len(cols) == 0")
		return nil
	}
	
	data := &RoleData{}
	data.Id = id
	data.IdName = idname
	
	if len(tbln) >0 {
		data.TableName = tbln
	} else {
		data.TableName = tblname
	}	

	data.DbMgr = dbmgr

	// 复制一份通用字段
	data.Cols = make(map[string]*mysql.MyFiled)
	for k, v := range cols {
		data.Cols[k] = &mysql.MyFiled{Data:v.Data, Bin:v.Bin}
	}

	return data
}

func CreateData(id int64, tbln string, dbmgr *mysql.DBMgr) *RoleData {
	return cd(id, tbln, dbmgr)
}

func CreateDataEx(id string, tbln string, dbmgr *mysql.DBMgr) *RoleData {
	return cd(id, tbln, dbmgr)
}

func ld(id interface{}, tbln string, create bool, dbmgr *mysql.DBMgr) *RoleData {
	data := cd(id, tbln, dbmgr)
	
	if data == nil {
		return nil
	}

	ret := data.Load()
	if ret == mysql.Ret_err{
		return nil
	}

	if ret == mysql.Ret_nodata {
		if  !create || !data.Create() {
			return nil
		}
	}

	return data
}

func LoadData(id int64, tbln string, create bool, dbmgr *mysql.DBMgr) *RoleData {
	return ld(id, tbln, create, dbmgr)
}

func LoadDataEx(id string, tbln string, create bool, dbmgr *mysql.DBMgr) *RoleData {
	return ld(id, tbln, create, dbmgr)
}

func dd(id interface{}, tbln string, auto bool, dbmgr *mysql.DBMgr) *RoleData {
	data := &RoleData{}
	data.Id = id
	data.IdName = idname
	
	if len(tbln) >0 {
		data.TableName = tbln
	} else {
		data.TableName = tblname
	}		

	data.DbMgr = dbmgr

	if auto {
		data.Delete(false)
	}

	return data
}

func DelData(id int64, tbln string, auto bool, dbmgr *mysql.DBMgr) *RoleData {
	return dd(id, tbln, auto, dbmgr)
}

func DelDataEx(id string, tbln string, auto bool, dbmgr *mysql.DBMgr) *RoleData {
	return dd(id, tbln, auto, dbmgr)
}

func (self *RoleData) GetData() []byte {
	tbl := &Tbl{}
	tbl.RoleId = proto.Int64(self.GetRoleId())
	tbl.RoleName = proto.String(self.GetRoleName())
	tbl.Level = proto.Int32(self.GetLevel())	
	
	pdata, err := proto.Marshal(tbl)
	if err != nil {
		logger.Error("RoleData:GetData i:%v", err)
		return nil
	}

	return pdata
}

func (self *RoleData) SetData(p []byte) bool {
	if p == nil {
		//logger.Error("RoleData:SetData p:nil")
		return false
	}

	tbl := &Tbl{}
	err := proto.Unmarshal(p, tbl)
	if err != nil {
		logger.Error("RoleData:SetData i:%v", err)
		return false
	}
	//if tbl.RoleId != nil {
	//	self.SetRoleId(tbl.GetRoleId())
	//}
	if tbl.RoleName != nil {
		self.SetRoleName(tbl.GetRoleName())
	}
	if tbl.Level != nil {
		self.SetLevel(tbl.GetLevel())
	}
	return self.Dirty
}

func (self *RoleData) SetTbl(tbl *Tbl) {
	//if tbl.RoleId != nil {
	//	self.SetRoleId(tbl.GetRoleId())
	//}
	if tbl.RoleName != nil {
		self.SetRoleName(tbl.GetRoleName())
	}
	if tbl.Level != nil {
		self.SetLevel(tbl.GetLevel())
	}	
}

func (self *RoleData) SetValues(rd map[string]string) {
	// KEY int?
	for k, v := range rd {
		switch k {
		case "roleId":
			d, _ := strconv.Atoi(v)
			self.SetRoleId(int64(d))
		case "roleName":
			self.SetRoleName(v)
		case "level":
			d, _ := strconv.Atoi(v)
			self.SetLevel(int32(d))
		default:
			logger.Error("RoleData:SetValues k:%v", k)
		}
	}
}

func (self *RoleData) GetValues() [][]string {
	// ATUO_ID -1
	rt := make([][]string, len(cols) - 1)
	
	kv_roleId := make([]string , 2)
	kv_roleId[0] = "roleId"
	kv_roleId[1] = strconv.Itoa(int(self.GetRoleId()))
	rt[1-1] = kv_roleId
	
	kv_roleName := make([]string , 2)
	kv_roleName[0] = "roleName"
	kv_roleName[1] = self.GetRoleName()
	rt[2-1] = kv_roleName
	
	kv_level := make([]string , 2)
	kv_level[0] = "level"
	kv_level[1] = strconv.Itoa(int(self.GetLevel()))
	rt[3-1] = kv_level
	
	return rt
}

// 属性的get{}, set{}

func (self *RoleData) GetRoleId() int64 {
	return self.GetInt64("roleId")
}

func (self *RoleData) SetRoleId(v int64) int {
	self.SetInt64("roleId", v)
	return 1 - 1
}

func (self *RoleData) GetRoleName() string {
	return self.GetStr("roleName")
}

func (self *RoleData) SetRoleName(v string) int {
	self.SetStr("roleName", v)
	return 2 - 1
}

func (self *RoleData) GetLevel() int32 {
	return self.GetInt32("level")
}

func (self *RoleData) SetLevel(v int32) int {
	self.SetInt32("level", v)
	return 3 - 1
}
